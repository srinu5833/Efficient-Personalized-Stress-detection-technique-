import numpy as np

# Chaotic map (e.g., Logistic map)
def logistic_map(x, r=4.0):
    return r * x * (1 - x)

# Objective function (replace with your own)
def objective_function(x):
    return np.sum(x**2)

# CFFO main loop
def CFFO(dim=10, pop_size=30, max_iter=100, lb=-5, ub=5):
    # Initialize population
    population = np.random.uniform(lb, ub, (pop_size, dim))
    fitness = np.array([objective_function(ind) for ind in population])
    
    # Best solution
    best_idx = np.argmin(fitness)
    best_solution = population[best_idx]
    best_fitness = fitness[best_idx]

    # Chaotic variable initialization
    chaotic_var = np.random.rand()

    for iteration in range(max_iter):
        for i in range(pop_size):
            chaotic_var = logistic_map(chaotic_var)
            perturbation = chaotic_var * (ub - lb) * np.random.uniform(-1, 1, dim)
            candidate = population[i] + perturbation
            candidate = np.clip(candidate, lb, ub)
            candidate_fitness = objective_function(candidate)

            # Fitness-focused replacement
            if candidate_fitness < fitness[i]:
                population[i] = candidate
                fitness[i] = candidate_fitness

                if candidate_fitness < best_fitness:
                    best_solution = candidate
                    best_fitness = candidate_fitness

        print(f"Iteration {iteration+1}: Best Fitness = {best_fitness:.4f}")

    return best_solution, best_fitness